{"version":3,"sources":["utils.ts","data/vehicles/contracts.ts","data/vehicles/mock.ts","data/vehicles/api.ts","components/VehicleTypeSelect.tsx","components/Filter.tsx","components/Table.tsx","App.tsx","index.tsx"],"names":["getRandomElement","array","Math","floor","random","length","round","value","fractionDigits","multiplier","pow","Number","EPSILON","VehicleType","vehicleTypes","sedan","hatchback","roadster","coupe","minivan","vehicleTypeTitles","marks","titles","vehicle","Array","from","map","_","i","start","end","title","type","id","toString","price","VehicleApi","filter","x","search","items","Select","SEP","VehicleTypeSelect","onChange","onValueChange","Filter","processTitleChange","props","processTypeChange","Gapped","gap","Input","this","React","Component","TableItem","number","CurrencyLabel","Table","vehicles","key","initialFilter","App","useState","setVehicles","setFilter","useEffect","data","rootElement","document","getElementById","render"],"mappings":"oOAAO,SAASA,EAAoBC,GAChC,OAAOA,EAAMC,KAAKC,MAAMD,KAAKE,SAAWH,EAAMI,SAO3C,SAASC,EAAMC,GAA4C,IAA7BC,EAA4B,uDAAX,EAC5CC,EAAaP,KAAKQ,IAAI,GAAIF,GAChC,OAAON,KAAKI,OAAOC,EAAQI,OAAOC,SAAWH,GAAcA,E,MCVnDI,E,kBAAAA,O,iBAAAA,I,yBAAAA,I,uBAAAA,I,iBAAAA,I,sBAAAA,M,KAQL,IAAMC,EAA8B,CACvCD,EAAYE,MACZF,EAAYG,UACZH,EAAYI,SACZJ,EAAYK,MACZL,EAAYM,SAGHC,GAA8C,mBACtDP,EAAYE,MAAQ,kCADkC,cAEtDF,EAAYG,UAAY,8CAF8B,cAGtDH,EAAYI,SAAW,oDAH+B,cAItDJ,EAAYK,MAAQ,4BAJkC,cAKtDL,EAAYM,QAAU,8CALgC,GCbrDE,EAAkB,CACpB,MACA,OACA,OACA,MACA,SACA,SACA,cAGEC,EAAmB,CACrB,KACA,KACA,SACA,SACA,OACA,iBACA,MACA,UACA,UACA,MACA,UACA,OACA,SCvBJ,ID0BgCjB,EC1B1BkB,GD0B0BlB,EC1BA,GD2BrBmB,MAAMC,KAAK,CAACpB,WAASqB,KAAI,SAACC,EAAGC,GAChC,IF3BuBC,EAAeC,EE2BhCC,EAAK,UAAM/B,EAAiBqB,GAAvB,YAAiCrB,EAAiBsB,IACvDU,EAAOhC,EAAiBc,GAC9B,MAAO,CACHmB,GAAIL,EAAEM,WACNH,QACAC,OACAG,MAAO7B,GFjCYuB,EEiCS,IFjCMC,EEiCE,IFhCrC5B,KAAKE,UAAY0B,EAAMD,GAASA,SGA9BO,EAAb,uGAC4D,IAAzCJ,EAAwC,EAAxCA,KAAMD,EAAkC,EAAlCA,MACjB,OAAOR,EAAQc,QAAO,SAAAC,GAAC,OAAa,MAARN,GAAgBM,EAAEN,OAASA,KAAoC,IAA3BM,EAAEP,MAAMQ,OAAOR,UAFvF,K,wDCQMS,EAAmC,CACvC,EAAE,EAAkB,sBACpBC,IAAOC,OAFgC,mBAGpC5B,EAAaY,KAA2B,SAAAY,GAAC,MAAI,CAACA,EAAGlB,EAAkBkB,SAG3DK,EAAsD,SAAC,GAG7D,IAFLpC,EAEI,EAFJA,MACAqC,EACI,EADJA,SAEA,OACE,kBAACH,EAAA,EAAD,CACED,MAAOA,EACPjC,MAAgB,MAATA,EAAgBA,GAAU,EACjCsC,cAAe,SAACP,GAAD,OAAYM,GAAgB,IAAPN,EAAW,KAAOA,OCjB/CQ,EAAb,4MAgBUC,mBAAqB,SAAChB,GAC5B,EAAKiB,MAAMJ,SAAX,2BAAyB,EAAKI,MAAMX,QAApC,IAA4CN,YAjBhD,EAoBUkB,kBAAoB,SAACjB,GAC3B,EAAKgB,MAAMJ,SAAX,2BAAyB,EAAKI,MAAMX,QAApC,IAA4CL,WArBhD,uDAEI,OACE,kBAACkB,EAAA,EAAD,CAAQC,IAAK,IACX,kBAACC,EAAA,EAAD,CACE7C,MAAO8C,KAAKL,MAAMX,OAAON,MACzBc,cAAeQ,KAAKN,qBAEtB,kBAAC,EAAD,CACExC,MAAO8C,KAAKL,MAAMX,OAAOL,KACzBY,SAAUS,KAAKJ,yBAVzB,GAA4BK,IAAMC,W,QCA5BC,EAAsC,SAAC,GAAyB,IAAvBjC,EAAsB,EAAtBA,QAASkC,EAAa,EAAbA,OACpD,OACI,4BACI,4BAAKA,GACL,4BAAKlC,EAAQQ,OACb,4BAAKX,EAAkBG,EAAQS,OAC/B,4BACI,kBAAC0B,EAAA,EAAD,CAAenD,MAAOgB,EAAQY,MAAO3B,eAAgB,OAUxDmD,EAA8B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1C,OACI,+BACI,+BACA,4BACI,iCACA,gFACA,+DACA,kEAGJ,+BACCA,EAASlC,KAAI,SAACY,EAAGV,GAAJ,OACV,kBAAC,EAAD,CAAWiC,IAAKvB,EAAEL,GAAIwB,OAAQ7B,EAAI,EAAGL,QAASe,UClCxDwB,EAA+B,CACjC/B,MAAO,GACPC,KAAM,MAKK,SAAS+B,IAAO,IAAD,EACMC,mBAAoB,IAD1B,mBACnBJ,EADmB,KACTK,EADS,OAEED,mBAASF,GAFX,mBAEnBzB,EAFmB,KAEX6B,EAFW,KAQ1B,OALAC,qBAAU,WACN,IAAMC,EAAOhC,EAAWG,OAAOF,GAC/B4B,EAAYG,KACb,CAAC/B,IAGA,oCACI,kBAAC,EAAD,CAAQA,OAAQA,EAAQO,SAAUsB,IAClC,kBAAC,EAAD,CAAON,SAAUA,KCnB7B,IAAMS,EAAcC,SAASC,eAAe,QAC5CC,iBAAO,kBAACT,EAAD,MAASM,K","file":"static/js/main.dc561053.chunk.js","sourcesContent":["export function getRandomElement<T>(array: T[]): T {\n    return array[Math.floor(Math.random() * array.length)];\n}\n\nexport function getRandomDigit(start: number, end: number): number {\n    return Math.random() * (end - start) + start;\n}\n\nexport function round(value: number, fractionDigits = 2): number {\n    const multiplier = Math.pow(10, fractionDigits);\n    return Math.round((value + Number.EPSILON) * multiplier) / multiplier;\n}\n","export enum VehicleType {\n    sedan,\n    hatchback,\n    roadster,\n    coupe,\n    minivan\n}\n\nexport const vehicleTypes: VehicleType[] = [\n    VehicleType.sedan,\n    VehicleType.hatchback,\n    VehicleType.roadster,\n    VehicleType.coupe,\n    VehicleType.minivan\n];\n\nexport const vehicleTypeTitles: Record<VehicleType, string> = {\n    [VehicleType.sedan]: \"Седан\",\n    [VehicleType.hatchback]: \"Хэтчбэк\",\n    [VehicleType.roadster]: \"Роадстер\",\n    [VehicleType.coupe]: \"Купэ\",\n    [VehicleType.minivan]: \"Минивэн\"\n};\n\nexport interface Vehicle {\n    id: string;\n    type: VehicleType;\n    title: string;\n    price: number;\n}\n\nexport interface VehicleFilter {\n    title: string;\n    type: VehicleType | null;\n}\n","import {getRandomDigit, getRandomElement, round} from \"../../utils\";\nimport {Vehicle, vehicleTypes} from \"./contracts\";\n\nconst marks: string[] = [\n    \"BMW\",\n    \"Lada\",\n    \"Jeep\",\n    \"KIA\",\n    \"Subaru\",\n    \"Toyota\",\n    \"Volkswagen\"\n];\n\nconst titles: string[] = [\n    \"M3\",\n    \"M5\",\n    \"Granta\",\n    \"Kalina\",\n    \"Polo\",\n    \"Grand Cherokee\",\n    \"Rio\",\n    \"Spectra\",\n    \"Impreza\",\n    \"BRZ\",\n    \"Corolla\",\n    \"Golf\",\n    \"Camry\"\n];\n\nexport function generateVehicle(length: number): Vehicle[] {\n    return Array.from({length}).map((_, i) => {\n        const title = `${getRandomElement(marks)} ${getRandomElement(titles)}`;\n        const type = getRandomElement(vehicleTypes);\n        return {\n            id: i.toString(),\n            title,\n            type,\n            price: round(getRandomDigit(10_000, 5_000_000))\n        };\n    });\n}\n","import {generateVehicle} from \"./mock\";\nimport {Vehicle, VehicleFilter} from \"./contracts\";\n\nconst vehicle = generateVehicle(15);\n\nexport class VehicleApi {\n    static search({type, title}: VehicleFilter): Vehicle[] {\n        return vehicle.filter(x => (type == null || x.type === type) && x.title.search(title) !== -1);\n    }\n}\n","import React from \"react\";\nimport {\n  VehicleType,\n  vehicleTypeTitles,\n  vehicleTypes\n} from \"../data/vehicles/contracts\";\nimport { Select } from \"@skbkontur/react-ui\";\n\nexport interface VehicleTypeSelectProps {\n  value: VehicleType | null;\n  onChange: (value: VehicleType | null) => void;\n}\n\nconst items: Array<[VehicleType, string]> = [\n  [-1 as VehicleType, \"Все\"],\n  Select.SEP() as any,\n  ...vehicleTypes.map<[VehicleType, string]>(x => [x, vehicleTypeTitles[x]])\n];\n\nexport const VehicleTypeSelect: React.FC<VehicleTypeSelectProps> = ({\n  value,\n  onChange\n}) => {\n  return (\n    <Select\n      items={items}\n      value={value != null ? value : (-1 as VehicleType)}\n      onValueChange={(x: any) => onChange(x === -1 ? null : x)}\n    />\n  );\n};","import React from \"react\";\nimport { VehicleFilter, VehicleType } from \"../data/vehicles/contracts\";\nimport { Gapped, Input } from \"@skbkontur/react-ui\";\nimport { VehicleTypeSelect } from \"./VehicleTypeSelect\";\n\ninterface FilterProps {\n  filter: VehicleFilter;\n  onChange: (filter: VehicleFilter) => void;\n}\n\nexport class Filter extends React.Component<FilterProps> {\n  render(): React.ReactNode {\n    return (\n      <Gapped gap={20}>\n        <Input\n          value={this.props.filter.title}\n          onValueChange={this.processTitleChange}\n        />\n        <VehicleTypeSelect\n          value={this.props.filter.type}\n          onChange={this.processTypeChange}\n        />\n      </Gapped>\n    );\n  }\n\n  private processTitleChange = (title: string): void => {\n    this.props.onChange({ ...this.props.filter, title });\n  };\n\n  private processTypeChange = (type: VehicleType | null): void => {\n    this.props.onChange({ ...this.props.filter, type });\n  };\n}","import React from \"react\";\nimport { CurrencyLabel } from \"@skbkontur/react-ui\";\nimport { Vehicle, vehicleTypeTitles } from \"../data/vehicles/contracts\";\n\ninterface TableItemProps {\n    vehicle: Vehicle;\n    number: number;\n}\n\n\nconst TableItem: React.FC<TableItemProps> = ({ vehicle, number }) => {\n    return (\n        <tr>\n            <td>{number}</td>\n            <td>{vehicle.title}</td>\n            <td>{vehicleTypeTitles[vehicle.type]}</td>\n            <td>\n                <CurrencyLabel value={vehicle.price} fractionDigits={2} />\n            </td>\n        </tr>\n    );\n};\n\ninterface TableProps{\n    vehicles: Vehicle[];\n}\n\nexport const Table: React.FC<TableProps> = ({ vehicles }) => {\n    return (\n        <table>\n            <thead>\n            <tr>\n                <th>#</th>\n                <th>Название</th>\n                <th>Тип ТС</th>\n                <th>Цена, ₽</th>\n            </tr>\n            </thead>\n            <tbody>\n            {vehicles.map((x, i) => (\n                <TableItem key={x.id} number={i + 1} vehicle={x} />\n            ))}\n            </tbody>\n        </table>\n    );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Vehicle, VehicleFilter } from \"./data/vehicles/contracts\";\nimport { VehicleApi } from \"./data/vehicles/api\";\nimport { Filter } from \"./components/Filter\";\nimport { Table } from \"./components/Table\";\n\nconst initialFilter: VehicleFilter = {\n    title: \"\",\n    type: null\n};\n\n\n\nexport default function App() {\n    const [vehicles, setVehicles] = useState<Vehicle[]>([]);\n    const [filter, setFilter] = useState(initialFilter)\n    useEffect(() => {\n        const data = VehicleApi.search(filter);\n        setVehicles(data);\n    }, [filter]);\n\n    return (\n        <>\n            <Filter filter={filter} onChange={setFilter}/>\n            <Table vehicles={vehicles} />\n        </>\n    );\n}\n","import React from \"react\";\nimport { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}